
1.7 Board Two.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000380  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000514  08000514  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000514  08000514  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  08000514  08000514  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000514  08000514  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000514  08000514  00010514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000518  08000518  00010518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800051c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002009c  2**0
                  CONTENTS
 10 .bss          0000001c  2000009c  2000009c  0002009c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000b8  200000b8  0002009c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 14 .debug_line   000001ff  00000000  00000000  0002010f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 000000c2  00000000  00000000  0002030e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_info   00000048  00000000  00000000  000203d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00000026  00000000  00000000  00020418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00000048  00000000  00000000  00020440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000006a  00000000  00000000  00020488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00000019  00000000  00000000  000204f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000002c  00000000  00000000  0002050c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000009c 	.word	0x2000009c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080004fc 	.word	0x080004fc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200000a0 	.word	0x200000a0
 80001d0:	080004fc 	.word	0x080004fc

080001d4 <enable_peripheral_clocks>:

@ function to enable the clocks for the peripherals we could be using (A, B, C, D and E)
enable_peripheral_clocks:

	@ load the address of the RCC address boundary (for enabling the IO clock)
	LDR R0, =RCC
 80001d4:	4898      	ldr	r0, [pc, #608]	; (8000438 <loop+0x1c>)

	@ enable all of the GPIO peripherals in AHBENR
	LDR R1, [R0, #AHBENR]
 80001d6:	6941      	ldr	r1, [r0, #20]
	ORR R1, 1 << GPIOE_ENABLE | 1 << GPIOD_ENABLE | 1 << GPIOC_ENABLE | 1 << GPIOB_ENABLE | 1 << GPIOA_ENABLE  @ enable GPIO
 80001d8:	f441 1178 	orr.w	r1, r1, #4063232	; 0x3e0000
	STR R1, [R0, #AHBENR]
 80001dc:	6141      	str	r1, [r0, #20]

	BX LR @ return
 80001de:	4770      	bx	lr

080001e0 <enable_uart>:
enable_uart:

	@make a note about the different ways that we set specific bits in this configuration section

	@ select which UART you want to enable
	LDR R0, =GPIOC
 80001e0:	4896      	ldr	r0, [pc, #600]	; (800043c <loop+0x20>)

	@ set the alternate function for the UART pins (what ever you have selected)
	LDR R1, =0x55
 80001e2:	f04f 0155 	mov.w	r1, #85	; 0x55
	STRB R1, [R0, AFRH + 1]
 80001e6:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25

	@ modify the mode of the GPIO pins you want to use to enable 'alternate function mode'
	LDR R1, [R0, GPIO_MODER]
 80001ea:	6801      	ldr	r1, [r0, #0]
	ORR R1, 0xA00000 @ Mask for pins to change to 'alternate function mode'
 80001ec:	f441 0120 	orr.w	r1, r1, #10485760	; 0xa00000
	STR R1, [R0, GPIO_MODER]
 80001f0:	6001      	str	r1, [r0, #0]

	@ modify the speed of the GPIO pins you want to use to enable 'high speed'
	LDR R1, [R0, GPIO_OSPEEDR]
 80001f2:	6881      	ldr	r1, [r0, #8]
	ORR R1, 0xF00000 @ Mask for pins to be set as high speed
 80001f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
	STR R1, [R0, GPIO_OSPEEDR]
 80001f8:	6081      	str	r1, [r0, #8]

	@ Set the enable bit for the specific UART you want to use
	@ Note: this might be in APB1ENR or APB2ENR
	@ you can find this out by looking in the datasheet
	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 80001fa:	488f      	ldr	r0, [pc, #572]	; (8000438 <loop+0x1c>)
	LDR R1, [R0, #APB1ENR] @ load the original value from the enable register
 80001fc:	69c1      	ldr	r1, [r0, #28]
	ORR R1, 1 << UART_EN  @ apply the bit mask to the previous values of the enable the UART
 80001fe:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
	STR R1, [R0, #APB1ENR] @ store the modified enable register values back to RCC
 8000202:	61c1      	str	r1, [r0, #28]

	@ this is the baud rate
	MOV R1, #0x46 @ from our earlier calculations (for 8MHz), store this in register R1
 8000204:	f04f 0146 	mov.w	r1, #70	; 0x46
	LDR R0, =UART @ the base address for the register to turn clocks on/off
 8000208:	488d      	ldr	r0, [pc, #564]	; (8000440 <loop+0x24>)
	STRH R1, [R0, #USART_BRR] @ store this value directly in the first half word (16 bits) of
 800020a:	8181      	strh	r1, [r0, #12]
							  	 @ the baud rate register

	@ we want to set a few things here, lets define their bit positions to make it more readable
	LDR R0, =UART @ the base address for the register to set up the specified UART
 800020c:	488c      	ldr	r0, [pc, #560]	; (8000440 <loop+0x24>)
	LDR R1, [R0, #USART_CR1] @ load the original value from the enable register
 800020e:	6801      	ldr	r1, [r0, #0]
	ORR R1, 1 << UART_TE | 1 << UART_RE | 1 << UART_UE @ make a bit mask with a '1' for the bits to enable,
 8000210:	f041 010d 	orr.w	r1, r1, #13
													   @ apply the bit mask to the previous values of the enable register
	STR R1, [R0, #USART_CR1] @ store the modified enable register values back to RCC
 8000214:	6001      	str	r1, [r0, #0]

	BX LR @ return
 8000216:	4770      	bx	lr

08000218 <enable_usart>:
enable_usart:

	@make a note about the different ways that we set specific bits in this configuration section

	@ select which UART you want to enable
	LDR R0, =GPIOC
 8000218:	4888      	ldr	r0, [pc, #544]	; (800043c <loop+0x20>)

	@ set the alternate function for the UART pins (what ever you have selected)
	LDR R1, =0x77
 800021a:	f04f 0177 	mov.w	r1, #119	; 0x77
	STRB R1, [R0, AFRL + 2]
 800021e:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22

	@ modify the mode of the GPIO pins you want to use to enable 'alternate function mode'
	LDR R1, [R0, GPIO_MODER]
 8000222:	6801      	ldr	r1, [r0, #0]
	ORR R1, 0xA00 @ Mask for pins to change to 'alternate function mode'
 8000224:	f441 6120 	orr.w	r1, r1, #2560	; 0xa00
	STR R1, [R0, GPIO_MODER]
 8000228:	6001      	str	r1, [r0, #0]

	@ modify the speed of the GPIO pins you want to use to enable 'high speed'
	LDR R1, [R0, GPIO_OSPEEDR]
 800022a:	6881      	ldr	r1, [r0, #8]
	ORR R1, 0xF00 @ Mask for pins to be set as high speed
 800022c:	f441 6170 	orr.w	r1, r1, #3840	; 0xf00
	STR R1, [R0, GPIO_OSPEEDR]
 8000230:	6081      	str	r1, [r0, #8]

	@ Set the enable bit for the specific UART you want to use
	@ Note: this might be in APB1ENR or APB2ENR
	@ you can find this out by looking in the datasheet
	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 8000232:	4881      	ldr	r0, [pc, #516]	; (8000438 <loop+0x1c>)
	LDR R1, [R0, #APB2ENR] @ load the original value from the enable register
 8000234:	6981      	ldr	r1, [r0, #24]
	ORR R1, 1 << USART_EN  @ apply the bit mask to the previous values of the enable the UART
 8000236:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
	STR R1, [R0, #APB2ENR] @ store the modified enable register values back to RCC
 800023a:	6181      	str	r1, [r0, #24]

	@ this is the baud rate
	MOV R1, #0x46 @ from our earlier calculations (for 8MHz), store this in register R1
 800023c:	f04f 0146 	mov.w	r1, #70	; 0x46
	LDR R0, =USART @ the base address for the register to turn clocks on/off
 8000240:	4880      	ldr	r0, [pc, #512]	; (8000444 <loop+0x28>)
	STRH R1, [R0, #USART_BRR] @ store this value directly in the first half word (16 bits) of
 8000242:	8181      	strh	r1, [r0, #12]
							  	 @ the baud rate register

	@ we want to set a few things here, lets define their bit positions to make it more readable
	LDR R0, =USART @ the base address for the register to set up the specified UART
 8000244:	487f      	ldr	r0, [pc, #508]	; (8000444 <loop+0x28>)
	LDR R1, [R0, #USART_CR1] @ load the original value from the enable register
 8000246:	6801      	ldr	r1, [r0, #0]
	ORR R1, 1 << UART_TE | 1 << UART_RE | 1 << UART_UE @ make a bit mask with a '1' for the bits to enable,
 8000248:	f041 010d 	orr.w	r1, r1, #13
													   @ apply the bit mask to the previous values of the enable register
	STR R1, [R0, #USART_CR1] @ store the modified enable register values back to RCC
 800024c:	6001      	str	r1, [r0, #0]

	BX LR @ return
 800024e:	4770      	bx	lr

08000250 <change_clock_speed>:

@ set the PLL (clocks are described in page 125 of the large manual)
change_clock_speed:
@ step 1, set clock to HSE (the external clock)
	@ enable HSE (and wait for complete)
	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 8000250:	4879      	ldr	r0, [pc, #484]	; (8000438 <loop+0x1c>)
	LDR R1, [R0, #RCC_CR] @ load the original value from the enable register
 8000252:	6801      	ldr	r1, [r0, #0]
	LDR R2, =1 << HSEBYP | 1 << HSEON @ make a bit mask with a '1' in the 0th bit position
 8000254:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
	ORR R1, R2 @ apply the bit mask to the previous values of the enable register
 8000258:	ea41 0102 	orr.w	r1, r1, r2
	STR R1, [R0, #RCC_CR] @ store the modified enable register values back to RCC
 800025c:	6001      	str	r1, [r0, #0]

0800025e <wait_for_HSERDY>:

	@ wait for the changes to be completed
wait_for_HSERDY:
	LDR R1, [R0, #RCC_CR] @ load the original value from the enable register
 800025e:	6801      	ldr	r1, [r0, #0]
	TST R1, 1 << HSERDY @ Test the HSERDY bit (check if it is 1)
 8000260:	f411 3f00 	tst.w	r1, #131072	; 0x20000
	BEQ wait_for_HSERDY
 8000264:	d0fb      	beq.n	800025e <wait_for_HSERDY>

@ step 2, now the clock is HSE, we are allowed to switch to PLL
	@ clock is set to External clock (external crystal) - 8MHz, can enable the PLL now
	LDR R1, [R0, #RCC_CFGR] @ load the original value from the enable register
 8000266:	6841      	ldr	r1, [r0, #4]
	LDR R2, =1 << 20 | 1 << PLLSRC
 8000268:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
	ORR R1, R2  @ set PLLSRC (use PLL) and PLLMUL to 0100 - bit 20 is 1 (set speed as 6x faster)
 800026c:	ea41 0102 	orr.w	r1, r1, r2
				@ see page 140 of the large manual for options
				@ NOTE: cannot go faster than 72MHz)
	STR R1, [R0, #RCC_CFGR] @ store the modified enable register values back to RCC
 8000270:	6041      	str	r1, [r0, #4]

	@ enable PLL (and wait for complete)
	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 8000272:	4871      	ldr	r0, [pc, #452]	; (8000438 <loop+0x1c>)
	LDR R1, [R0, #RCC_CR] @ load the original value from the enable register
 8000274:	6801      	ldr	r1, [r0, #0]
	ORR R1, 1 << PLLON @ apply the bit mask to turn on the PLL
 8000276:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
	STR R1, [R0, #RCC_CR] @ store the modified enable register values back to RCC
 800027a:	6001      	str	r1, [r0, #0]

0800027c <wait_for_PLLRDY>:

wait_for_PLLRDY:
	LDR R1, [R0, #RCC_CR] @ load the original value from the enable register
 800027c:	6801      	ldr	r1, [r0, #0]
	TST R1, 1 << PLLRDY @ Test the HSERDY bit (check if it is 1)
 800027e:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
	BEQ wait_for_PLLRDY
 8000282:	d0fb      	beq.n	800027c <wait_for_PLLRDY>

@ step 3, PLL is ready, switch over the system clock to PLL
	LDR R0, =RCC  @ load the address of the RCC address boundary (for enabling the IO clock)
 8000284:	486c      	ldr	r0, [pc, #432]	; (8000438 <loop+0x1c>)
	LDR R1, [R0, #RCC_CFGR]  @ load the current value of the peripheral clock registers
 8000286:	6841      	ldr	r1, [r0, #4]
	MOV R2, 1 << 13 | 1 << 10 | 1 << 1  @ some more settings - bit 1 (SW = 10)  - PLL set as system clock
 8000288:	f242 4202 	movw	r2, #9218	; 0x2402
									   @ bit 10 (HCLK=100) divided by 2 (clock is faster, need to prescale for peripherals)
	ORR R1, R2	@ Set the values of these two clocks (turn them on)
 800028c:	ea41 0102 	orr.w	r1, r1, r2
	STR R1, [R0, #RCC_CFGR]  @ store the modified register back to the submodule
 8000290:	6041      	str	r1, [r0, #4]

	LDR R1, [R0, #RCC_CFGR]  @ load the current value of the peripheral clock registers
 8000292:	6841      	ldr	r1, [r0, #4]
	ORR R1, 1 << USBPRE	@ Set the USB prescaler (when PLL is on for the USB)
 8000294:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
	STR R1, [R0, #RCC_CFGR]  @ store the modified register back to the submodule
 8000298:	6041      	str	r1, [r0, #4]

	@ this is the baud rate
	MOV R1, #0xD0 @ for 24MHz to 115200Hz baud
 800029a:	f04f 01d0 	mov.w	r1, #208	; 0xd0
	LDR R0, =UART @ the base address for the register to turn clocks on/off
 800029e:	4868      	ldr	r0, [pc, #416]	; (8000440 <loop+0x24>)
	STRH R1, [R0, #USART_BRR] @ store this value directly in the first half word (16 bits) of
 80002a0:	8181      	strh	r1, [r0, #12]
							  	 @ the baud rate register
	MOV R1, #0xD0 @ for 24MHz to 115200Hz baud
 80002a2:	f04f 01d0 	mov.w	r1, #208	; 0xd0
	LDR R0, =USART @ the base address for the register to turn clocks on/off
 80002a6:	4867      	ldr	r0, [pc, #412]	; (8000444 <loop+0x28>)
	STRH R1, [R0, #USART_BRR] @ store this value directly in the first half word (16 bits) of
 80002a8:	8181      	strh	r1, [r0, #12]
							  	 @ the baud rate register

	BX LR @ return
 80002aa:	4770      	bx	lr

080002ac <initialise_power>:

@ initialise the power systems on the microcontroller
@ PWREN (enable power to the clock), SYSCFGEN system clock enable
initialise_power:

	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 80002ac:	4862      	ldr	r0, [pc, #392]	; (8000438 <loop+0x1c>)

	@ enable clock power in APB1ENR
	LDR R1, [R0, #APB1ENR]
 80002ae:	69c1      	ldr	r1, [r0, #28]
	ORR R1, 1 << PWREN @ apply the bit mask for power enable
 80002b0:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
	STR R1, [R0, #APB1ENR]
 80002b4:	61c1      	str	r1, [r0, #28]

	@ enable clock config in APB2ENR
	LDR R1, [R0, #APB2ENR]
 80002b6:	6981      	ldr	r1, [r0, #24]
	ORR R1, 1 << SYSCFGEN @ apply the bit mask to allow clock configuration
 80002b8:	f041 0101 	orr.w	r1, r1, #1
	STR R1, [R0, #APB2ENR]
 80002bc:	6181      	str	r1, [r0, #24]

	BX LR @ return
 80002be:	4770      	bx	lr

080002c0 <initialise_discovery_board>:

	@ initialise the discovery board I/O (just outputs: inputs are selected by default)
initialise_discovery_board:
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 80002c0:	4861      	ldr	r0, [pc, #388]	; (8000448 <loop+0x2c>)
	LDR R1, =0x5555  @ load the binary value of 01 (OUTPUT) for each port in the upper two bytes
 80002c2:	f245 5155 	movw	r1, #21845	; 0x5555
					 @ as 0x5555 = 01010101 01010101
	STRH R1, [R0, #GPIO_MODER + 2]   @ store the new register values in the top half word representing
 80002c6:	8041      	strh	r1, [r0, #2]
								@ the MODER settings for pe8-15
	BX LR @ return from function call
 80002c8:	4770      	bx	lr

080002ca <transmit_string_button>:

.text


transmit_string_button:
	LDR R2, =GPIOA	@ port for the input button
 80002ca:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
	LDR R3, [R2, IDR]
 80002ce:	6913      	ldr	r3, [r2, #16]
	TST R3, #0x1
 80002d0:	f013 0f01 	tst.w	r3, #1
	BEQ transmit_string_button
 80002d4:	d0f9      	beq.n	80002ca <transmit_string_button>

080002d6 <button_up>:


button_up:
	LDR R2, =GPIOA	@ port for the input button
 80002d6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
	LDR R3, [R2, IDR]
 80002da:	6913      	ldr	r3, [r2, #16]
	TST R3, #0x1
 80002dc:	f013 0f01 	tst.w	r3, #1
	BNE button_up
 80002e0:	d1f9      	bne.n	80002d6 <button_up>

080002e2 <transmit_string>:
	@ R2 = transmit UART setting, 0 for USART1, 1 for UART2
	@ Call transmit_string button to wait for button press


	@ Use USART if R0 = 0 otherwise use UART
	CMP R0, #0
 80002e2:	2800      	cmp	r0, #0
	LDR R0, =USART
 80002e4:	4857      	ldr	r0, [pc, #348]	; (8000444 <loop+0x28>)
	BEQ tx_uart
 80002e6:	d000      	beq.n	80002ea <tx_uart>
	LDR R0, =UART
 80002e8:	4855      	ldr	r0, [pc, #340]	; (8000440 <loop+0x24>)

080002ea <tx_uart>:

tx_uart:

	LDR R2, [R0, USART_ISR] @ load the status of the UART
 80002ea:	69c2      	ldr	r2, [r0, #28]
	ANDS R2, 1 << UART_TXE  @ 'AND' the current status with the bit mask that we are interested in
 80002ec:	f012 0280 	ands.w	r2, r2, #128	; 0x80
						    @ NOTE, the ANDS is used so that if the result is '0' the z register flag is set

	@ loop back to check status again if the flag indicates there is no byte waiting
	BEQ tx_uart
 80002f0:	d0fb      	beq.n	80002ea <tx_uart>

	@ load the next value in the string into the transmit buffer for the specified UART
	LDRB R3, [R1], #1
 80002f2:	f811 3b01 	ldrb.w	r3, [r1], #1
	STRB R3, [R0, USART_TDR]
 80002f6:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28

	@ note the use of the S on the end of the SUBS, this means that the register flags are set
	@ and this subtraction can be used to make a branch

	CMP R3, #0
 80002fa:	2b00      	cmp	r3, #0

	@ keep looping while there are more characters to send
	BNE tx_uart
 80002fc:	d1f5      	bne.n	80002ea <tx_uart>

	@ make a delay before sending again
	BX LR
 80002fe:	4770      	bx	lr

08000300 <receive_string>:
@ continue reading forever (NOTE: eventually it will run out of memory as we don't have a big buffer)
receive_string:
	@ R1 = String pointer
	@ R2 = Max string length

	LDR R3, =#0
 8000300:	f04f 0300 	mov.w	r3, #0

	@ Use USART if R0 = 0 otherwise use UART
	CMP R0, #0
 8000304:	2800      	cmp	r0, #0
	LDR R0, =USART
 8000306:	484f      	ldr	r0, [pc, #316]	; (8000444 <loop+0x28>)
	LDR R6, =#0x30
 8000308:	f04f 0630 	mov.w	r6, #48	; 0x30
	BEQ rx_loop
 800030c:	d002      	beq.n	8000314 <rx_loop>
	LDR R0, =UART
 800030e:	484c      	ldr	r0, [pc, #304]	; (8000440 <loop+0x24>)
	LDR R6, =#0
 8000310:	f04f 0600 	mov.w	r6, #0

08000314 <rx_loop>:

rx_loop:

	LDR R5, [R0, USART_ISR] @ load the status of the UART
 8000314:	69c5      	ldr	r5, [r0, #28]

	TST R5, 1 << UART_ORE | 1 << UART_FE  @ 'AND' the current status with the bit mask that we are interested in
 8000316:	f015 0f0a 	tst.w	r5, #10
						   @ NOTE, the ANDS is used so that if the result is '0' the z register flag is set

	BNE clear_error
 800031a:	d110      	bne.n	800033e <clear_error>

	TST R5, 1 << UART_RXNE @ 'AND' the current status with the bit mask that we are interested in
 800031c:	f015 0f20 	tst.w	r5, #32
							  @ NOTE, the ANDS is used so that if the result is '0' the z register flag is set

	BEQ rx_loop @ loop back to check status again if the flag indicates there is no byte waiting
 8000320:	d0f8      	beq.n	8000314 <rx_loop>

	LDRB R4, [R0, USART_RDR] @ load the lowest byte (RDR bits [0:7] for an 8 bit read)
 8000322:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
	STRB R4, [R1, R3]
 8000326:	54cc      	strb	r4, [r1, r3]
	ADD R3, #1
 8000328:	f103 0301 	add.w	r3, r3, #1

	@ Check whether max size reached
	CMP R3, R2
 800032c:	4293      	cmp	r3, r2
	BGT exit
 800032e:	dc0b      	bgt.n	8000348 <exit>

	@ Check for terminating character
	CMP R4, R6
 8000330:	42b4      	cmp	r4, r6
	BEQ exit
 8000332:	d009      	beq.n	8000348 <exit>

08000334 <no_reset>:


no_reset:

	@ load the status of the UART
	LDR R5, [R0, USART_RQR]
 8000334:	6985      	ldr	r5, [r0, #24]
	ORR R5, 1 << UART_RXFRQ
 8000336:	f045 0508 	orr.w	r5, r5, #8
	STR R5, [R0, USART_RQR]
 800033a:	6185      	str	r5, [r0, #24]

	BGT rx_loop
 800033c:	dcea      	bgt.n	8000314 <rx_loop>

0800033e <clear_error>:


clear_error:

	@ Clear the overrun/frame error flag in the register USART_ICR (see page 897)
	LDR R5, [R0, USART_ICR]
 800033e:	6a05      	ldr	r5, [r0, #32]
	ORR R5, 1 << UART_ORECF | 1 << UART_FECF @ clear the flags (by setting flags to 1)
 8000340:	f045 0508 	orr.w	r5, r5, #8
	STR R5, [R0, USART_ICR]
 8000344:	6205      	str	r5, [r0, #32]
	B rx_loop
 8000346:	e7e5      	b.n	8000314 <rx_loop>

08000348 <exit>:

exit:
	SUB R3, #1
 8000348:	f1a3 0301 	sub.w	r3, r3, #1
	LDRB R4, =#0
 800034c:	f04f 0400 	mov.w	r4, #0
	STRB R4, [R1, R3]
 8000350:	54cc      	strb	r4, [r1, r3]
	BX LR
 8000352:	4770      	bx	lr

08000354 <substitution_cipher>:
	@ R1 = Input string memory address
	@ R2 = Encode/Decode
	@ Function assumes all values are uppercase (1.3.2a converts all values to uppercase)

	@ Store Addresses
	LDR R3, =plaintext_alphabet
 8000354:	4b3d      	ldr	r3, [pc, #244]	; (800044c <loop+0x30>)
	LDR R4, =ciphertext_alphabet
 8000356:	4c3e      	ldr	r4, [pc, #248]	; (8000450 <loop+0x34>)

	@ If R2 != 0, flip the plaintext and ciphertext values to decode instead of encode
	CMP R2, #0
 8000358:	2a00      	cmp	r2, #0
	LDR R2, =#0 @ Use R2 as counter
 800035a:	f04f 0200 	mov.w	r2, #0
	BEQ string_loop
 800035e:	d001      	beq.n	8000364 <string_loop>
	LDR R3, =ciphertext_alphabet
 8000360:	4b3b      	ldr	r3, [pc, #236]	; (8000450 <loop+0x34>)
	LDR R4, =plaintext_alphabet
 8000362:	4c3a      	ldr	r4, [pc, #232]	; (800044c <loop+0x30>)

08000364 <string_loop>:

string_loop:
	@ Loop through each character
	LDRB R5, [R1, R2]
 8000364:	5c8d      	ldrb	r5, [r1, r2]

	@ Finish string_loop if null character reached
	CMP R5, #0
 8000366:	2d00      	cmp	r5, #0
	BEQ string_loop_exit
 8000368:	d00e      	beq.n	8000388 <string_loop_exit>

	@ Set index for lookup loop
	LDR R6, =#0
 800036a:	f04f 0600 	mov.w	r6, #0

0800036e <cipher_loop>:

cipher_loop:
	@ Loop through alphabet 1 until we hit the correct character
	LDRB R7, [R3, R6]
 800036e:	5d9f      	ldrb	r7, [r3, r6]

	CMP R5, R7
 8000370:	42bd      	cmp	r5, r7
	BEQ cipher_loop_exit	@ Exit loop if character is equal
 8000372:	d004      	beq.n	800037e <cipher_loop_exit>
	CMP R7, #0
 8000374:	2f00      	cmp	r7, #0
	BEQ cipher_loop_non_character_exit @ Exit loop if the character is not found in the lookup table
 8000376:	d004      	beq.n	8000382 <cipher_loop_non_character_exit>

	ADD R6, #1
 8000378:	f106 0601 	add.w	r6, r6, #1

	B cipher_loop
 800037c:	e7f7      	b.n	800036e <cipher_loop>

0800037e <cipher_loop_exit>:

cipher_loop_exit:
	@ Lookup equivalent character in alphabet 2 and update the memory of R1 with new value
	LDRB R7, [R4, R6]
 800037e:	5da7      	ldrb	r7, [r4, r6]
	STRB R7, [R1, R2]
 8000380:	548f      	strb	r7, [r1, r2]

08000382 <cipher_loop_non_character_exit>:

cipher_loop_non_character_exit:

	ADD R2, #1
 8000382:	f102 0201 	add.w	r2, r2, #1
	@ Return to string_loop
	B string_loop
 8000386:	e7ed      	b.n	8000364 <string_loop>

08000388 <string_loop_exit>:

string_loop_exit:
BX LR
 8000388:	4770      	bx	lr

0800038a <display_from_bitmap>:
display_from_bitmap:
	@ "Arguments"
	@ R1 = bitmap
	@ Note: R2 is updated by this function
	
	LDR R2, =GPIOE
 800038a:	4a2f      	ldr	r2, [pc, #188]	; (8000448 <loop+0x2c>)
	STRB R1, [R2, #ODR + 1]
 800038c:	7551      	strb	r1, [r2, #21]
	
	BX LR
 800038e:	4770      	bx	lr

08000390 <count_and_display_letters>:
	@ R0 = 0 for delay, 1 for button
	@ R1 = Input string to count and display
	@ Modifies registers R1 - R7
	
	
	LDR R2, =alphabet
 8000390:	4a30      	ldr	r2, [pc, #192]	; (8000454 <loop+0x38>)

08000392 <alphabet_loop>:

alphabet_loop:
	LDRB R3, [R2], #1
 8000392:	f812 3b01 	ldrb.w	r3, [r2], #1
	
	CMP R3, #0 
 8000396:	2b00      	cmp	r3, #0
	BEQ alphabet_loop_end
 8000398:	d02e      	beq.n	80003f8 <alphabet_loop_end>
	
	LDR R4, =#0
 800039a:	f04f 0400 	mov.w	r4, #0
	LDR R5, =#0
 800039e:	f04f 0500 	mov.w	r5, #0

080003a2 <count_string_loop>:
	
count_string_loop:
	LDRB R6, [R1, R4]
 80003a2:	5d0e      	ldrb	r6, [r1, r4]
	CMP R6, #0
 80003a4:	2e00      	cmp	r6, #0
	BEQ string_loop_end
 80003a6:	d006      	beq.n	80003b6 <string_loop_end>
	CMP R3, R6
 80003a8:	42b3      	cmp	r3, r6
	BNE skip_count_increment
 80003aa:	d101      	bne.n	80003b0 <skip_count_increment>
	ADD R5, #1
 80003ac:	f105 0501 	add.w	r5, r5, #1

080003b0 <skip_count_increment>:
skip_count_increment:
	ADD R4, #1
 80003b0:	f104 0401 	add.w	r4, r4, #1
	B count_string_loop
 80003b4:	e7f5      	b.n	80003a2 <count_string_loop>

080003b6 <string_loop_end>:
	
string_loop_end:
	PUSH {R0-R12, lr}
 80003b6:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
	LDRB R1, =#0
 80003ba:	f04f 0100 	mov.w	r1, #0

080003be <led_bitmat_loop>:

led_bitmat_loop:
	SUBS R5, #1
 80003be:	3d01      	subs	r5, #1
	BLT led_bitmat_loop_end
 80003c0:	db04      	blt.n	80003cc <led_bitmat_loop_end>
	LSL R1, #1
 80003c2:	ea4f 0141 	mov.w	r1, r1, lsl #1
	ADD R1, #1
 80003c6:	f101 0101 	add.w	r1, r1, #1
	B led_bitmat_loop
 80003ca:	e7f8      	b.n	80003be <led_bitmat_loop>

080003cc <led_bitmat_loop_end>:
led_bitmat_loop_end:
	AND R1, #0b11111111
 80003cc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
	BL display_from_bitmap
 80003d0:	f7ff ffdb 	bl	800038a <display_from_bitmap>
	POP {R0-R12, lr}
 80003d4:	e8bd 5fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}

	CMP R0, #1
 80003d8:	2801      	cmp	r0, #1
	BNE delay500
 80003da:	d10c      	bne.n	80003f6 <delay500>

080003dc <wait_for_button_loop>:

wait_for_button_loop:
	LDR R7, =GPIOA
 80003dc:	f04f 4790 	mov.w	r7, #1207959552	; 0x48000000
	LDR R7, [R7, IDR]
 80003e0:	693f      	ldr	r7, [r7, #16]
	TST R7, #0x01
 80003e2:	f017 0f01 	tst.w	r7, #1
	BEQ wait_for_button_loop
 80003e6:	d0f9      	beq.n	80003dc <wait_for_button_loop>

080003e8 <wait_for_not_button_loop>:
wait_for_not_button_loop:
	LDR R7, =GPIOA
 80003e8:	f04f 4790 	mov.w	r7, #1207959552	; 0x48000000
	LDR R7, [R7, IDR]
 80003ec:	693f      	ldr	r7, [r7, #16]
	TST R7, #0x01
 80003ee:	f017 0f01 	tst.w	r7, #1
	BNE wait_for_not_button_loop
 80003f2:	d1f9      	bne.n	80003e8 <wait_for_not_button_loop>

	B alphabet_loop
 80003f4:	e7cd      	b.n	8000392 <alphabet_loop>

080003f6 <delay500>:

delay500:
	@ IMPLEMENT THIS
	B alphabet_loop
 80003f6:	e7cc      	b.n	8000392 <alphabet_loop>

080003f8 <alphabet_loop_end>:

alphabet_loop_end:
	PUSH {R1, lr}
 80003f8:	b502      	push	{r1, lr}
	LDR R1, =#0
 80003fa:	f04f 0100 	mov.w	r1, #0
	BL display_from_bitmap
 80003fe:	f7ff ffc4 	bl	800038a <display_from_bitmap>
	POP {R1, lr}
 8000402:	e8bd 4002 	ldmia.w	sp!, {r1, lr}
	BX LR
 8000406:	4770      	bx	lr

08000408 <main>:
.text


main:

 	BL initialise_power
 8000408:	f7ff ff50 	bl	80002ac <initialise_power>
	BL enable_peripheral_clocks
 800040c:	f7ff fee2 	bl	80001d4 <enable_peripheral_clocks>
	BL initialise_discovery_board
 8000410:	f7ff ff56 	bl	80002c0 <initialise_discovery_board>
	BL enable_uart
 8000414:	f7ff fee4 	bl	80001e0 <enable_uart>
	BL change_clock_speed
 8000418:	f7ff ff1a 	bl	8000250 <change_clock_speed>

0800041c <loop>:

loop:

	LDR R1, =incoming_buffer
 800041c:	490e      	ldr	r1, [pc, #56]	; (8000458 <loop+0x3c>)
	LDR R2, =incoming_counter
 800041e:	4a0f      	ldr	r2, [pc, #60]	; (800045c <loop+0x40>)

	LDRB R2, [R2]
 8000420:	7812      	ldrb	r2, [r2, #0]

	@ Receive from board1
	LDR R0, =#1
 8000422:	f04f 0001 	mov.w	r0, #1
	BL receive_string
 8000426:	f7ff ff6b 	bl	8000300 <receive_string>

	@ Decode the cipher
	LDR R0, =#1				@ Decode mode
 800042a:	f04f 0001 	mov.w	r0, #1
	BL substitution_cipher
 800042e:	f7ff ff91 	bl	8000354 <substitution_cipher>

	@ Count and display the letters
	BL count_and_display_letters
 8000432:	f7ff ffad 	bl	8000390 <count_and_display_letters>

	B loop
 8000436:	e7f1      	b.n	800041c <loop>
	LDR R0, =RCC
 8000438:	40021000 	.word	0x40021000
	LDR R0, =GPIOC
 800043c:	48000800 	.word	0x48000800
	LDR R0, =UART @ the base address for the register to turn clocks on/off
 8000440:	40004c00 	.word	0x40004c00
	LDR R0, =USART @ the base address for the register to turn clocks on/off
 8000444:	40013800 	.word	0x40013800
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 8000448:	48001000 	.word	0x48001000
	LDR R3, =plaintext_alphabet
 800044c:	20000000 	.word	0x20000000
	LDR R4, =ciphertext_alphabet
 8000450:	2000001c 	.word	0x2000001c
	LDR R2, =alphabet
 8000454:	20000038 	.word	0x20000038
	LDR R1, =incoming_buffer
 8000458:	20000058 	.word	0x20000058
	LDR R2, =incoming_counter
 800045c:	20000098 	.word	0x20000098

08000460 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000460:	480d      	ldr	r0, [pc, #52]	; (8000498 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000462:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000464:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000468:	480c      	ldr	r0, [pc, #48]	; (800049c <LoopForever+0x6>)
  ldr r1, =_edata
 800046a:	490d      	ldr	r1, [pc, #52]	; (80004a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800046c:	4a0d      	ldr	r2, [pc, #52]	; (80004a4 <LoopForever+0xe>)
  movs r3, #0
 800046e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000470:	e002      	b.n	8000478 <LoopCopyDataInit>

08000472 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000472:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000474:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000476:	3304      	adds	r3, #4

08000478 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000478:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800047a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800047c:	d3f9      	bcc.n	8000472 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800047e:	4a0a      	ldr	r2, [pc, #40]	; (80004a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000480:	4c0a      	ldr	r4, [pc, #40]	; (80004ac <LoopForever+0x16>)
  movs r3, #0
 8000482:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000484:	e001      	b.n	800048a <LoopFillZerobss>

08000486 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000486:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000488:	3204      	adds	r2, #4

0800048a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800048a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800048c:	d3fb      	bcc.n	8000486 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800048e:	f000 f811 	bl	80004b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000492:	f7ff ffb9 	bl	8000408 <main>

08000496 <LoopForever>:

LoopForever:
  b LoopForever
 8000496:	e7fe      	b.n	8000496 <LoopForever>
  ldr   r0, =_estack
 8000498:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800049c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004a0:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 80004a4:	0800051c 	.word	0x0800051c
  ldr r2, =_sbss
 80004a8:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 80004ac:	200000b8 	.word	0x200000b8

080004b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004b0:	e7fe      	b.n	80004b0 <ADC1_2_IRQHandler>
	...

080004b4 <__libc_init_array>:
 80004b4:	b570      	push	{r4, r5, r6, lr}
 80004b6:	4d0d      	ldr	r5, [pc, #52]	; (80004ec <__libc_init_array+0x38>)
 80004b8:	4c0d      	ldr	r4, [pc, #52]	; (80004f0 <__libc_init_array+0x3c>)
 80004ba:	1b64      	subs	r4, r4, r5
 80004bc:	10a4      	asrs	r4, r4, #2
 80004be:	2600      	movs	r6, #0
 80004c0:	42a6      	cmp	r6, r4
 80004c2:	d109      	bne.n	80004d8 <__libc_init_array+0x24>
 80004c4:	4d0b      	ldr	r5, [pc, #44]	; (80004f4 <__libc_init_array+0x40>)
 80004c6:	4c0c      	ldr	r4, [pc, #48]	; (80004f8 <__libc_init_array+0x44>)
 80004c8:	f000 f818 	bl	80004fc <_init>
 80004cc:	1b64      	subs	r4, r4, r5
 80004ce:	10a4      	asrs	r4, r4, #2
 80004d0:	2600      	movs	r6, #0
 80004d2:	42a6      	cmp	r6, r4
 80004d4:	d105      	bne.n	80004e2 <__libc_init_array+0x2e>
 80004d6:	bd70      	pop	{r4, r5, r6, pc}
 80004d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80004dc:	4798      	blx	r3
 80004de:	3601      	adds	r6, #1
 80004e0:	e7ee      	b.n	80004c0 <__libc_init_array+0xc>
 80004e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80004e6:	4798      	blx	r3
 80004e8:	3601      	adds	r6, #1
 80004ea:	e7f2      	b.n	80004d2 <__libc_init_array+0x1e>
 80004ec:	08000514 	.word	0x08000514
 80004f0:	08000514 	.word	0x08000514
 80004f4:	08000514 	.word	0x08000514
 80004f8:	08000518 	.word	0x08000518

080004fc <_init>:
 80004fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004fe:	bf00      	nop
 8000500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000502:	bc08      	pop	{r3}
 8000504:	469e      	mov	lr, r3
 8000506:	4770      	bx	lr

08000508 <_fini>:
 8000508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800050a:	bf00      	nop
 800050c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800050e:	bc08      	pop	{r3}
 8000510:	469e      	mov	lr, r3
 8000512:	4770      	bx	lr
